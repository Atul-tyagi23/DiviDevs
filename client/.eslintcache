[{"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\index.js":"1","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\App.js":"2","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Landing.js":"3","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Navbar.js":"4","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\auth\\Login.js":"5","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\auth\\Register.js":"6","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\store.js":"7","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\index.js":"8","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\alert.js":"9","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\types.js":"10","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\alert.js":"11","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Alert.js":"12","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\dashboard\\Dashboard.js":"13","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\auth.js":"14","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\auth.js":"15","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\utils\\setAuthToken.js":"16","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\routing\\PrivateRoute.js":"17","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\profile.js":"18","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\profile.js":"19","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Spinner.js":"20","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\CreateProfile.js":"21","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\dashboard\\DashboardActions.js":"22","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\EditProfile.js":"23","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\AddExperience.js":"24","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\AddEducation.js":"25"},{"size":201,"mtime":1608533907929,"results":"26","hashOfConfig":"27"},{"size":2003,"mtime":1614598487864,"results":"28","hashOfConfig":"27"},{"size":1104,"mtime":1612950894694,"results":"29","hashOfConfig":"27"},{"size":1515,"mtime":1612949632788,"results":"30","hashOfConfig":"27"},{"size":2060,"mtime":1612839669181,"results":"31","hashOfConfig":"27"},{"size":2855,"mtime":1612789819705,"results":"32","hashOfConfig":"27"},{"size":403,"mtime":1608840505564,"results":"33","hashOfConfig":"27"},{"size":210,"mtime":1612832338414,"results":"34","hashOfConfig":"27"},{"size":420,"mtime":1608817331404,"results":"35","hashOfConfig":"27"},{"size":572,"mtime":1614575414273,"results":"36","hashOfConfig":"27"},{"size":418,"mtime":1608820044187,"results":"37","hashOfConfig":"27"},{"size":458,"mtime":1608819121334,"results":"38","hashOfConfig":"27"},{"size":1429,"mtime":1614383672840,"results":"39","hashOfConfig":"27"},{"size":2356,"mtime":1612953393970,"results":"40","hashOfConfig":"27"},{"size":1321,"mtime":1612843643956,"results":"41","hashOfConfig":"27"},{"size":268,"mtime":1608874066983,"results":"42","hashOfConfig":"27"},{"size":692,"mtime":1612832116076,"results":"43","hashOfConfig":"27"},{"size":1027,"mtime":1614596133576,"results":"44","hashOfConfig":"27"},{"size":3520,"mtime":1614598806113,"results":"45","hashOfConfig":"27"},{"size":296,"mtime":1612951100239,"results":"46","hashOfConfig":"27"},{"size":6183,"mtime":1614573191661,"results":"47","hashOfConfig":"27"},{"size":629,"mtime":1614383713570,"results":"48","hashOfConfig":"27"},{"size":7448,"mtime":1614573178466,"results":"49","hashOfConfig":"27"},{"size":2955,"mtime":1614597844816,"results":"50","hashOfConfig":"27"},{"size":2969,"mtime":1614598625007,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"e52nnh",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\index.js",[],["110","111"],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\App.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Landing.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\auth\\Login.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\auth\\Register.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\store.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\index.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\alert.js",["112"],"import {SET_ALERT, REMOVE_ALERT } from '../actions/types'\r\n\r\nconst initialState = [\r\n];\r\n\r\nexport default function (state=initialState, action) {\r\n    const {type, payload} = action\r\n\r\n    switch (type) {\r\n        case SET_ALERT:\r\n            return [...state, payload]\r\n        case REMOVE_ALERT: \r\n            return state.filter(alert => alert.id !== payload)  \r\n        default:\r\n            return state ;\r\n    }\r\n}","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\types.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\alert.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Alert.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\dashboard\\Dashboard.js",["113"],"import React, {Fragment, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {getCurrentProfile} from '../../actions/profile'\r\nimport Spinner from '../layout/Spinner'\r\nimport DashboardActions from './DashboardActions'\r\n \r\n\r\nconst Dashboard = ({getCurrentProfile, auth : {user}, profile : {profile, loading}}) => {\r\n    useEffect( () => {\r\n       getCurrentProfile();  \r\n    }, [])\r\n    return loading && profile === null ? <Spinner/ > : <Fragment>\r\n        <h1 className=\"large text-primary\"> \r\n            Dashboard\r\n        </h1>\r\n        <p className=\"lead\">\r\n            <i className=\"fas fa-user\">Welcome {user && user.name}</i>\r\n        </p>\r\n        {profile && !profile.message ? <Fragment><DashboardActions/></Fragment> : (\r\n         <Fragment>\r\n             <p>you have not yet setup a profile, please add some info</p>\r\n             <Link to=\"/create-profile\" className=\"btn btn-primary my-1\">\r\n                 Create Profile\r\n             </Link>\r\n         </Fragment> )}\r\n\r\n    </Fragment>\r\n}\r\n\r\nDashboard.propTypes = {\r\n  getCurrentProfile : PropTypes.func.isRequired,\r\n  auth : PropTypes.object.isRequired,\r\n  profile : PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n   auth : state.auth,\r\n   profile : state.profile\r\n})\r\n\r\nexport default connect(mapStateToProp, {getCurrentProfile})(Dashboard);\r\n","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\auth.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\auth.js",["114"],"import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT\r\n} from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem(\"token\"),\r\n    isAuthenticated: null,\r\n    loading: true,\r\n    user: null\r\n  };\r\n\r\n  \r\nexport default function(state = initialState, action) {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case USER_LOADED: \r\n             return {\r\n                 ...state,\r\n                 isAuthenticated: true,\r\n                 loading: false,\r\n                 user: payload\r\n             }\r\n        case REGISTER_SUCCESS:\r\n        case LOGIN_SUCCESS:    \r\n           //  console.log(payload.token);\r\n             localStorage.setItem('token', payload.token)\r\n             return {\r\n                ...state,\r\n                ...payload,\r\n                isAuthenticated: true,\r\n                loading: false\r\n            }\r\n        case REGISTER_FAIL:\r\n        case LOGIN_FAIL:    \r\n        case AUTH_ERROR:    \r\n        case LOGOUT:\r\n            localStorage.removeItem('token')    \r\n            return {\r\n                ...state,\r\n                isAuthenticated: false,\r\n                loading: false\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\reducers\\profile.js",["115","116"],"import {GET_PROFILE, PROFILE_ERROR, CLEAR_PROFILE, UPDATE_PROFILE} from '../actions/types'\r\nimport profile from '../actions/profile'\r\n\r\nconst initialState = {\r\n    profile : null,\r\n    profiles : [],\r\n    repos : [],\r\n    loading : true,\r\n    error : {}\r\n}\r\n\r\n\r\nexport default function(state = initialState, action) {\r\n    const {type, payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_PROFILE :\r\n        case UPDATE_PROFILE:    \r\n            return {\r\n                ...state,\r\n                profile : payload,\r\n                loading : false,\r\n            };\r\n            \r\n        case PROFILE_ERROR :\r\n            return {\r\n                ...state,\r\n                error : payload,\r\n                loading : false\r\n            }    \r\n        case CLEAR_PROFILE :\r\n            return {\r\n                ...state,\r\n                profile : null,\r\n                repos : [],\r\n                loading : false\r\n            \r\n            }  \r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\actions\\profile.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\layout\\Spinner.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\CreateProfile.js",["117"],"import React, {useState, Fragment} from 'react';\r\nimport {Link, withRouter} from 'react-router-dom'; // withRouter for history obj to redirect from actions \r\n\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {createProfile} from '../../actions/profile'\r\nimport { createStore } from 'redux';\r\n\r\n\r\n \r\n\r\nconst CreateProfile = ({createProfile, history}) => {\r\n    const [formData, setFormData] = useState({\r\n        company: '',\r\n        website: '',\r\n        location: '',\r\n        status: '',\r\n        skills: '',\r\n        githubusername: '',\r\n        bio: '',\r\n        twitter: '',\r\n        facebook: '',\r\n        linkedin: '',\r\n        youtube: '',\r\n        instagram: ''\r\n      });\r\n\r\n      const [socialMediaInputs, toggleSocialMediaInputs] = useState(false);\r\n\r\nconst {\r\n    company,\r\n    website,\r\n    location,\r\n    status,\r\n    skills,\r\n    githubusername,\r\n    bio,\r\n    twitter,\r\n    facebook,\r\n    linkedin,\r\n    youtube,\r\n    instagram\r\n  }  = formData;\r\n\r\n  const onChange = e => setFormData({...formData, [e.target.name]: e.target.value});\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    createProfile(formData, history)\r\n  }\r\n\r\n\r\n\r\nreturn (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">\r\n        Create Your Profile\r\n      </h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\"></i> Let's get some information to make your\r\n        profile stand out\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form className=\"form\" onSubmit={e => onSubmit(e)}>\r\n        <div className=\"form-group\">\r\n          <select name=\"status\" value={status} onChange={(e) => onChange(e)} >\r\n            <option value=\"0\">* Select Professional Status</option>\r\n            <option value=\"Developer\">Developer</option>\r\n            <option value=\"Junior Developer\">Junior Developer</option>\r\n            <option value=\"Senior Developer\">Senior Developer</option>\r\n            <option value=\"Manager\">Manager</option>\r\n            <option value=\"Student or Learning\">Student or Learning</option>\r\n            <option value=\"Instructor\">Instructor or Teacher</option>\r\n            <option value=\"Intern\">Intern</option>\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          <small className=\"form-text\"\r\n            >Give us an idea of where you are at in your career</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Company\" name=\"company\" value={company} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >Could be your own company or one you work for</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Website\" name=\"website\" value={website} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >Could be your own or a company website</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Location\" name=\"location\" value={location} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >City & state suggested (eg. Boston, MA)</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Skills\" name=\"skills\" value={skills} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >Please use comma separated values (eg.\r\n            HTML,CSS,JavaScript,PHP)</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Github Username\"\r\n            name=\"githubusername\"\r\n            value={githubusername}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\"\r\n            >If you want your latest repos and a Github link, include your\r\n            username</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <textarea placeholder=\"A short bio of yourself\" name=\"bio\" value={bio} onChange={(e) => onChange(e)}></textarea>\r\n          <small className=\"form-text\">Tell us a little about yourself</small>\r\n        </div>\r\n\r\n        <div className=\"my-2\">\r\n          <button onClick={() => toggleSocialMediaInputs(!socialMediaInputs)} type=\"button\" className=\"btn btn-light\">\r\n            Add Social Network Links\r\n          </button>\r\n          <span>Optional</span>\r\n        </div>\r\n        \r\n        {socialMediaInputs && <Fragment>\r\n            <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-twitter fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" value={twitter} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-facebook fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" value={facebook} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-youtube fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" value={youtube} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-linkedin fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" value={linkedin} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-instagram fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" value={instagram} onChange={(e) => onChange(e)} />\r\n        </div>\r\n            </Fragment>}\r\n\r\n\r\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\r\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">Go Back</Link>\r\n      </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nCreateProfile.propTypes = {\r\n  createProfile :PropTypes.func.isRequired,\r\n};\r\n\r\n \r\n\r\nexport default connect(null, {createProfile})(withRouter(CreateProfile));\r\n","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\dashboard\\DashboardActions.js",[],"C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\EditProfile.js",["118","119"],"import React, {useState, Fragment, useEffect} from 'react';\r\nimport {Link, withRouter} from 'react-router-dom'; // withRouter for history obj to redirect from actions \r\n\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {createProfile, getCurrentProfile} from '../../actions/profile'\r\nimport { createStore } from 'redux';\r\n\r\n\r\n \r\n\r\nconst EditProfile = ({profile: {profile, loading} ,createProfile, getCurrentProfile ,history}) => {\r\n    const [formData, setFormData] = useState({\r\n        company: '',\r\n        website: '',\r\n        location: '',\r\n        status: '',\r\n        skills: '',\r\n        githubusername: '',\r\n        bio: '',\r\n        twitter: '',\r\n        facebook: '',\r\n        linkedin: '',\r\n        youtube: '',\r\n        instagram: ''\r\n      });\r\n\r\n const [socialMediaInputs, toggleSocialMediaInputs] = useState(false);\r\n\r\n useEffect(()=>{\r\n     getCurrentProfile();\r\n\r\n     setFormData({\r\n         company: loading || !profile.company ? '' : profile.company,\r\n         website: loading || !profile.website ? '' : profile.website,\r\n         location: loading || !profile.location ? '' : profile.location,\r\n         status: loading || !profile.status ? '' : profile.status,\r\n         skills: loading || !profile.skills ? '' : profile.skills.join(','),\r\n         githubusername: loading || !profile.githubusername ? '' : profile.githubusername,\r\n         bio: loading || !profile.bio ? '' : profile.bio,\r\n         twitter: loading || !profile.social ? '' : profile.social.twitter,\r\n         facebook: loading || !profile.social ? '' : profile.social.facebook,\r\n         likedin: loading || !profile.social ? '' : profile.social.likedin,\r\n         youtube: loading || !profile.social ? '' : profile.social.youtube,\r\n         instagram: loading || !profile.social ? '' : profile.social.instagram,\r\n     });\r\n\r\n }, [loading]);\r\n\r\nconst {\r\n    company,\r\n    website,\r\n    location,\r\n    status,\r\n    skills,\r\n    githubusername,\r\n    bio,\r\n    twitter,\r\n    facebook,\r\n    linkedin,\r\n    youtube,\r\n    instagram\r\n  }  = formData;\r\n\r\n  const onChange = e => setFormData({...formData, [e.target.name]: e.target.value});\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    createProfile(formData, history, true)\r\n  }\r\n\r\n\r\n\r\nreturn (\r\n    <Fragment>\r\n      <h1 className=\"large text-primary\">\r\n        Create Your Profile\r\n      </h1>\r\n      <p className=\"lead\">\r\n        <i className=\"fas fa-user\"></i> Let's get some information to make your\r\n        profile stand out\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form className=\"form\" onSubmit={e => onSubmit(e)}>\r\n        <div className=\"form-group\">\r\n          <select name=\"status\" value={status} onChange={(e) => onChange(e)} >\r\n            <option value=\"0\">* Select Professional Status</option>\r\n            <option value=\"Developer\">Developer</option>\r\n            <option value=\"Junior Developer\">Junior Developer</option>\r\n            <option value=\"Senior Developer\">Senior Developer</option>\r\n            <option value=\"Manager\">Manager</option>\r\n            <option value=\"Student or Learning\">Student or Learning</option>\r\n            <option value=\"Instructor\">Instructor or Teacher</option>\r\n            <option value=\"Intern\">Intern</option>\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          <small className=\"form-text\"\r\n            >Give us an idea of where you are at in your career</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Company\" name=\"company\" value={company} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >Could be your own company or one you work for</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Website\" name=\"website\" value={website} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >Could be your own or a company website</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Location\" name=\"location\" value={location} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >City & state suggested (eg. Boston, MA)</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Skills\" name=\"skills\" value={skills} onChange={(e) => onChange(e)} />\r\n          <small className=\"form-text\"\r\n            >Please use comma separated values (eg.\r\n            HTML,CSS,JavaScript,PHP)</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Github Username\"\r\n            name=\"githubusername\"\r\n            value={githubusername}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n          <small className=\"form-text\"\r\n            >If you want your latest repos and a Github link, include your\r\n            username</small\r\n          >\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <textarea placeholder=\"A short bio of yourself\" name=\"bio\" value={bio} onChange={(e) => onChange(e)}></textarea>\r\n          <small className=\"form-text\">Tell us a little about yourself</small>\r\n        </div>\r\n\r\n        <div className=\"my-2\">\r\n          <button onClick={() => toggleSocialMediaInputs(!socialMediaInputs)} type=\"button\" className=\"btn btn-light\">\r\n            Add Social Network Links\r\n          </button>\r\n          <span>Optional</span>\r\n        </div>\r\n        \r\n        {socialMediaInputs && <Fragment>\r\n            <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-twitter fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" value={twitter} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-facebook fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" value={facebook} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-youtube fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" value={youtube} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-linkedin fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" value={linkedin} onChange={(e) => onChange(e)} />\r\n        </div>\r\n\r\n        <div className=\"form-group social-input\">\r\n          <i className=\"fab fa-instagram fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" value={instagram} onChange={(e) => onChange(e)} />\r\n        </div>\r\n            </Fragment>}\r\n\r\n\r\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\r\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">Go Back</Link>\r\n      </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nEditProfile.propTypes = {\r\n  createProfile :PropTypes.func.isRequired,\r\n  getCurrentProfile: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired\r\n\r\n};\r\nconst mapStateToProps = state => ({\r\n    profile: state.profile,\r\n});\r\n \r\n\r\nexport default connect(mapStateToProps, {createProfile, getCurrentProfile})(withRouter(EditProfile));\r\n","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\AddExperience.js",["120","121","122"],"import React, {Fragment, useState} from 'react'\r\nimport {Link, withRouter } from  'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport {addExperience} from '../../actions/profile'\r\n\r\nconst AddExperience = ({addExperience, history}) => {\r\n const [formData, setFormData] = useState({\r\n     company: '',\r\n     title: '',\r\n     location: '',\r\n     from: '',\r\n     to: '',\r\n     current: false,\r\n     description: ''\r\n });\r\n\r\n const [toDateDisabled, toggleDisabled] = useState(false);\r\n\r\n  const { company, title, location, from, to, current, description } = formData;\r\n\r\n  const onChange = e =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n      <h1 class=\"large text-primary\">\r\n       Add An Experience\r\n      </h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fas fa-code-branch\"></i> Add any developer/programming\r\n        positions that you have had in the past\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form class=\"form\" onSubmit={e => {\r\n          e.preventDefault();\r\n          addExperience(formData, history);\r\n      }}>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Job Title\" name=\"title\" required value={title} onChange={(e)=>onChange(e) }  />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Company\" name=\"company\" required value={company}onChange={(e)=>onChange(e) } />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Location\" name=\"location\" value={location}onChange={(e)=>onChange(e) } />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>From Date</h4>\r\n          <input type=\"date\" name=\"from\" value={from} checked={current}onChange={(e)=>onChange(e) } />\r\n        </div>\r\n         <div class=\"form-group\">\r\n          <p><input type=\"checkbox\" name=\"current\" value={current} value={company}onChange={(e)=> {\r\n              setFormData({...formData, current: !current});\r\n              toggleDisabled(!toDateDisabled)\r\n          }}/>{' '}Current Job</p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>To Date</h4>\r\n          <input type=\"date\" name=\"to\" value={to}onChange={(e)=>onChange(e) } disabled={toDateDisabled? 'disabled' : ''} />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <textarea\r\n            name=\"description\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Job Description\"\r\n            value={description}onChange={(e)=>onChange(e) }\r\n          ></textarea>\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary my-1\" />\r\n        <a class=\"btn btn-light my-1\" href=\"dashboard.html\">Go Back</a>\r\n      </form>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nAddExperience.propTypes = {\r\n   addExperience : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(null, {addExperience})(AddExperience);\r\n","C:\\Users\\atult\\Desktop\\DiviDev\\client\\src\\components\\profile-forms\\AddEducation.js",["123","124","125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":6,"column":1,"nodeType":"132","endLine":17,"endColumn":2},{"ruleId":"133","severity":1,"message":"134","line":13,"column":8,"nodeType":"135","endLine":13,"endColumn":10,"suggestions":"136"},{"ruleId":"130","severity":1,"message":"131","line":20,"column":1,"nodeType":"132","endLine":54,"endColumn":2},{"ruleId":"137","severity":1,"message":"138","line":2,"column":8,"nodeType":"139","messageId":"140","endLine":2,"endColumn":15},{"ruleId":"130","severity":1,"message":"131","line":13,"column":1,"nodeType":"132","endLine":43,"endColumn":2},{"ruleId":"137","severity":1,"message":"141","line":7,"column":10,"nodeType":"139","messageId":"140","endLine":7,"endColumn":21},{"ruleId":"137","severity":1,"message":"141","line":7,"column":10,"nodeType":"139","messageId":"140","endLine":7,"endColumn":21},{"ruleId":"133","severity":1,"message":"142","line":48,"column":5,"nodeType":"135","endLine":48,"endColumn":14,"suggestions":"143"},{"ruleId":"137","severity":1,"message":"144","line":2,"column":9,"nodeType":"139","messageId":"140","endLine":2,"endColumn":13},{"ruleId":"137","severity":1,"message":"145","line":2,"column":15,"nodeType":"139","messageId":"140","endLine":2,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":54,"column":68,"nodeType":"148","endLine":54,"endColumn":83},{"ruleId":"137","severity":1,"message":"144","line":2,"column":9,"nodeType":"139","messageId":"140","endLine":2,"endColumn":13},{"ruleId":"137","severity":1,"message":"145","line":2,"column":15,"nodeType":"139","messageId":"140","endLine":2,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":53,"column":68,"nodeType":"148","endLine":53,"endColumn":83},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentProfile'. Either include it or remove the dependency array. If 'getCurrentProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["151"],"no-unused-vars","'profile' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","React Hook useEffect has missing dependencies: 'getCurrentProfile', 'profile.bio', 'profile.company', 'profile.githubusername', 'profile.location', 'profile.skills', 'profile.social', 'profile.status', and 'profile.website'. Either include them or remove the dependency array. If 'getCurrentProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["152"],"'Link' is defined but never used.","'withRouter' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [getCurrentProfile]",{"range":"157","text":"158"},"Update the dependencies array to be: [getCurrentProfile, loading, profile.bio, profile.company, profile.githubusername, profile.location, profile.skills, profile.social, profile.status, profile.website]",{"range":"159","text":"160"},[469,471],"[getCurrentProfile]",[1855,1864],"[getCurrentProfile, loading, profile.bio, profile.company, profile.githubusername, profile.location, profile.skills, profile.social, profile.status, profile.website]"]